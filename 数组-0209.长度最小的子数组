** 力扣题目链接 https://leetcode-cn.com/problems/minimum-size-subarray-sum/
给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。
示例：
输入：s = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。

** 思路 **
滑动窗口：不断调节子序列的起始位置和终止位置，得到满足条件的最短的数组长度
![Image text](https://github.com/elory-y/leetcode/blob/main/img-storage/clideWindow.png)
i指向数组第0个位置，j从第0个位置向右滑动，直到满足条件，此时满足条件的数组的长度为j+1,  然后i向右滑动1，看是否满足条件，不满足条件j继续向右滑动，直到再次满足条件，此时满足条件
的数组长度为j-i+1， 之后i 继续向右，知道j到数组的最后一个位置（j可以用for遍历数组的长度）。
注意：不存在符合条件的数组要返回0，可以预先设置一个无限大的数等于最短数组的长度res，当遍历完成之后res仍为无限大，则说明不存在符合条件的数组要返回0


** 作者代码 **
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        # 定义一个无限大的数, 当所有数都加起来小于s的时候，res等于无限大，就返回0
        res = float('inf')
        Sum = 0
        index = 0
        for i in range(len(nums)):
          Sum += nums[i]
          while Sum >= s:
              res = min(res, i-index + 1)
              Sum -= nums[index]  # 起始指针向右滑动一个位置,求当前的数组的和
              index += 1
        return 0 if res == float('int') else res
